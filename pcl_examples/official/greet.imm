; ModuleID = 'greet'
source_filename = "greet"

%anon = type { <{}>* }

@str = private unnamed_addr constant [18 x i8] c"Enter name len : \00", align 1
@str.1 = private unnamed_addr constant [8 x i8] c"Hello: \00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %s = alloca i8*
  %l = alloca i32
  call void @writeString(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @str, i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* %l
  call void @writeChar(i8 10)
  %1 = load i32, i32* %l
  %2 = sext i32 %1 to i64
  %malloc_mul = mul i64 ptrtoint (i8* getelementptr (i8, i8* null, i64 1) to i64), %2
  %3 = call i8* @GC_malloc(i64 %malloc_mul)
  store i8* %3, i8** %s
  %call = load i32, i32* %l
  %4 = load i8*, i8** %s
  call void @readString(i32 %call, i8* %4)
  call void @writeString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.1, i32 0, i32 0))
  %5 = load i8*, i8** %s
  call void @writeString(i8* %5)
  call void @writeChar(i8 10)
  ret void
}
