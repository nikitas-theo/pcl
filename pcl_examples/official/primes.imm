; ModuleID = 'primes'
source_filename = "primes"

%anon = type { <{}>* }
%anon.0 = type { %anon* }

@str = private unnamed_addr constant [32 x i8] c"Please, give the upper limit : \00", align 1
@str.1 = private unnamed_addr constant [29 x i8] c"Prime numbers between 0 and \00", align 1
@str.2 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@str.3 = private unnamed_addr constant [3 x i8] c"2\0A\00", align 1
@str.4 = private unnamed_addr constant [3 x i8] c"3\0A\00", align 1
@str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.8 = private unnamed_addr constant [30 x i8] c" prime number(s) were found.\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %limit = alloca i32
  %number = alloca i32
  %counter = alloca i32
  call void @writeString(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str, i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* %limit
  call void @writeString(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @str.1, i32 0, i32 0))
  %call = load i32, i32* %limit
  call void @writeInteger(i32 %call)
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.2, i32 0, i32 0))
  store i32 0, i32* %counter
  %binop_l = load i32, i32* %limit
  %1 = icmp sge i32 %binop_l, 2
  %if_cond = icmp ne i1 %1, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  %binop_l1 = load i32, i32* %counter
  %addtmp = add i32 %binop_l1, 1
  store i32 %addtmp, i32* %counter
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.3, i32 0, i32 0))
  br label %endif

endif:                                            ; preds = %else, %then
  %binop_l2 = load i32, i32* %limit
  %2 = icmp sge i32 %binop_l2, 3
  %if_cond3 = icmp ne i1 %2, false
  br i1 %if_cond3, label %then4, label %else6

else:                                             ; preds = %entry
  br label %endif

then4:                                            ; preds = %endif
  %binop_l7 = load i32, i32* %counter
  %addtmp8 = add i32 %binop_l7, 1
  store i32 %addtmp8, i32* %counter
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.4, i32 0, i32 0))
  br label %endif5

endif5:                                           ; preds = %else6, %then4
  store i32 6, i32* %number
  br label %loop

else6:                                            ; preds = %endif
  br label %endif5

loop:                                             ; preds = %endif26, %endif5
  %binop_r = load i32, i32* %limit
  %binop_l9 = load i32, i32* %number
  %3 = icmp sle i32 %binop_l9, %binop_r
  br i1 %3, label %body, label %endloop

endloop:                                          ; preds = %loop
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.7, i32 0, i32 0))
  %call34 = load i32, i32* %counter
  call void @writeInteger(i32 %call34)
  call void @writeString(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @str.8, i32 0, i32 0))
  ret void

body:                                             ; preds = %loop
  %binop_l10 = load i32, i32* %number
  %addtmp11 = sub i32 %binop_l10, 1
  %4 = call i1 @prime(%anon* %hidden_struct, i32 %addtmp11)
  %if_cond12 = icmp ne i1 %4, false
  br i1 %if_cond12, label %then13, label %else15

then13:                                           ; preds = %body
  %binop_l16 = load i32, i32* %counter
  %addtmp17 = add i32 %binop_l16, 1
  store i32 %addtmp17, i32* %counter
  %binop_l18 = load i32, i32* %number
  %addtmp19 = sub i32 %binop_l18, 1
  call void @writeInteger(i32 %addtmp19)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.5, i32 0, i32 0))
  br label %endif14

endif14:                                          ; preds = %else15, %then13
  %binop_r20 = load i32, i32* %limit
  %binop_l21 = load i32, i32* %number
  %neqtmp = icmp ne i32 %binop_l21, %binop_r20
  %5 = icmp eq i1 %neqtmp, false
  br i1 %5, label %short_and, label %full_and

else15:                                           ; preds = %body
  br label %endif14

short_and:                                        ; preds = %endif14
  br label %end_and

full_and:                                         ; preds = %endif14
  %binop_l22 = load i32, i32* %number
  %addtmp23 = add i32 %binop_l22, 1
  %6 = call i1 @prime(%anon* %hidden_struct, i32 %addtmp23)
  %andtmp = and i1 %neqtmp, %6
  br label %end_and

end_and:                                          ; preds = %full_and, %short_and
  %phi_and = phi i1 [ false, %short_and ], [ %andtmp, %full_and ]
  %if_cond24 = icmp ne i1 %phi_and, false
  br i1 %if_cond24, label %then25, label %else27

then25:                                           ; preds = %end_and
  %binop_l28 = load i32, i32* %counter
  %addtmp29 = add i32 %binop_l28, 1
  store i32 %addtmp29, i32* %counter
  %binop_l30 = load i32, i32* %number
  %addtmp31 = add i32 %binop_l30, 1
  call void @writeInteger(i32 %addtmp31)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.6, i32 0, i32 0))
  br label %endif26

endif26:                                          ; preds = %else27, %then25
  %binop_l32 = load i32, i32* %number
  %addtmp33 = add i32 %binop_l32, 6
  store i32 %addtmp33, i32* %number
  br label %loop

else27:                                           ; preds = %end_and
  br label %endif26
}

define i1 @prime(%anon* %0, i32 %1) {
entry:
  %n = alloca i32
  store i32 %1, i32* %n
  %hidden_struct = alloca %anon.0
  %2 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %2
  %result = alloca i1
  %i = alloca i32
  %binop_l = load i32, i32* %n
  %3 = icmp slt i32 %binop_l, 0
  %if_cond = icmp ne i1 %3, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  %4 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  %5 = load %anon*, %anon** %4
  %unop_minus = load i32, i32* %n
  %6 = sub i32 0, %unop_minus
  %7 = call i1 @prime(%anon* %5, i32 %6)
  store i1 %7, i1* %result
  br label %endif

endif:                                            ; preds = %endif4, %then
  store i1 true, i1* %result
  %fdef = load i1, i1* %result
  ret i1 %fdef

else:                                             ; preds = %entry
  %binop_l1 = load i32, i32* %n
  %8 = icmp slt i32 %binop_l1, 2
  %if_cond2 = icmp ne i1 %8, false
  br i1 %if_cond2, label %then3, label %else5

then3:                                            ; preds = %else
  store i1 false, i1* %result
  br label %endif4

endif4:                                           ; preds = %endif9, %then3
  br label %endif

else5:                                            ; preds = %else
  %binop_l6 = load i32, i32* %n
  %eqtmp = icmp eq i32 %binop_l6, 2
  %if_cond7 = icmp ne i1 %eqtmp, false
  br i1 %if_cond7, label %then8, label %else10

then8:                                            ; preds = %else5
  store i1 true, i1* %result
  br label %endif9

endif9:                                           ; preds = %endif15, %then8
  br label %endif4

else10:                                           ; preds = %else5
  %binop_l11 = load i32, i32* %n
  %modtmp = srem i32 %binop_l11, 2
  %eqtmp12 = icmp eq i32 %modtmp, 0
  %if_cond13 = icmp ne i1 %eqtmp12, false
  br i1 %if_cond13, label %then14, label %else16

then14:                                           ; preds = %else10
  store i1 false, i1* %result
  br label %endif15

endif15:                                          ; preds = %endloop, %then14
  br label %endif9

else16:                                           ; preds = %else10
  store i32 3, i32* %i
  br label %loop

loop:                                             ; preds = %endif24, %else16
  %binop_l17 = load i32, i32* %n
  %divtmp = sdiv i32 %binop_l17, 2
  %binop_l18 = load i32, i32* %i
  %9 = icmp sle i32 %binop_l18, %divtmp
  br i1 %9, label %body, label %endloop

endloop:                                          ; preds = %loop
  br label %endif15

body:                                             ; preds = %loop
  %binop_r = load i32, i32* %i
  %binop_l19 = load i32, i32* %n
  %modtmp20 = srem i32 %binop_l19, %binop_r
  %eqtmp21 = icmp eq i32 %modtmp20, 0
  %if_cond22 = icmp ne i1 %eqtmp21, false
  br i1 %if_cond22, label %then23, label %else25

then23:                                           ; preds = %body
  store i1 false, i1* %result
  %return = load i1, i1* %result
  ret i1 %return

endif24:                                          ; preds = %else25
  %binop_l26 = load i32, i32* %i
  %addtmp = add i32 %binop_l26, 2
  store i32 %addtmp, i32* %i
  br label %loop

else25:                                           ; preds = %body
  br label %endif24
}
