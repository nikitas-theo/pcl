; ModuleID = '70func'
source_filename = "70func"

%anon = type { <{}>* }
%anon.0 = type { %anon* }
%anon.1 = type { %anon* }

@str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  call void @doit(%anon* %hidden_struct, double 3.000000e+00)
  call void @doit(%anon* %hidden_struct, double 1.000000e+00)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str, i32 0, i32 0))
  ret void
}

define double @inc(%anon* %0, double %1) {
entry:
  %x = alloca double
  store double %1, double* %x
  %hidden_struct = alloca %anon.0
  %2 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %2
  %result = alloca double
  %binop_l = load double, double* %x
  %addtmp = fadd double %binop_l, 1.000000e+00
  store double %addtmp, double* %result
  %fdef = load double, double* %result
  ret double %fdef
}

define void @doit(%anon* %0, double %1) {
entry:
  %f = alloca double
  store double %1, double* %f
  %hidden_struct = alloca %anon.1
  %2 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %2
  %3 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %4 = load %anon*, %anon** %3
  %call = load double, double* %f
  %5 = call double @inc(%anon* %4, double %call)
  %6 = call i32 @truncFunc(double %5)
  call void @writeInteger(i32 %6)
  ret void
}
