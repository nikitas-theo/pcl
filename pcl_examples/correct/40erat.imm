; ModuleID = '40erat'
source_filename = "40erat"

%anon = type { <{}>* }

@str = private unnamed_addr constant [2 x i8] c"\09\00", align 1
@str.1 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@str.2 = private unnamed_addr constant [24 x i8] c" prime number(s) found\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %mark = alloca [1001 x i1]
  %count = alloca i32
  %i = alloca i32
  %n = alloca i32
  store i32 0, i32* %count
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %body, %entry
  %binop_l = load i32, i32* %i
  %0 = icmp sle i32 %binop_l, 1000
  br i1 %0, label %body, label %endloop

endloop:                                          ; preds = %loop
  store i32 2, i32* %n
  br label %loop2

body:                                             ; preds = %loop
  %arrAcc = load i32, i32* %i
  %1 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr [1001 x i1], [1001 x i1]* %mark, i64 0, i64 %1
  store i1 true, i1* %arrayIdx
  %binop_l1 = load i32, i32* %i
  %addtmp = add i32 %binop_l1, 1
  store i32 %addtmp, i32* %i
  br label %loop

loop2:                                            ; preds = %endif, %endloop
  %binop_l5 = load i32, i32* %n
  %2 = icmp sle i32 %binop_l5, 1000
  br i1 %2, label %body4, label %endloop3

endloop3:                                         ; preds = %loop2
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.1, i32 0, i32 0))
  %call20 = load i32, i32* %count
  call void @writeInteger(i32 %call20)
  call void @writeString(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.2, i32 0, i32 0))
  ret void

body4:                                            ; preds = %loop2
  %arrAcc6 = load i32, i32* %n
  %3 = sext i32 %arrAcc6 to i64
  %arrayIdx7 = getelementptr [1001 x i1], [1001 x i1]* %mark, i64 0, i64 %3
  %4 = load i1, i1* %arrayIdx7
  %if_cond = icmp ne i1 %4, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %body4
  %binop_l8 = load i32, i32* %count
  %addtmp9 = add i32 %binop_l8, 1
  store i32 %addtmp9, i32* %count
  %call = load i32, i32* %n
  call void @writeInteger(i32 %call)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str, i32 0, i32 0))
  %assign = load i32, i32* %n
  store i32 %assign, i32* %i
  br label %loop10

endif:                                            ; preds = %else, %endloop11
  %binop_l18 = load i32, i32* %n
  %addtmp19 = add i32 %binop_l18, 1
  store i32 %addtmp19, i32* %n
  br label %loop2

else:                                             ; preds = %body4
  br label %endif

loop10:                                           ; preds = %body12, %then
  %binop_l13 = load i32, i32* %i
  %5 = icmp sle i32 %binop_l13, 1000
  br i1 %5, label %body12, label %endloop11

endloop11:                                        ; preds = %loop10
  br label %endif

body12:                                           ; preds = %loop10
  %arrAcc14 = load i32, i32* %i
  %6 = sext i32 %arrAcc14 to i64
  %arrayIdx15 = getelementptr [1001 x i1], [1001 x i1]* %mark, i64 0, i64 %6
  store i1 false, i1* %arrayIdx15
  %binop_r = load i32, i32* %n
  %binop_l16 = load i32, i32* %i
  %addtmp17 = add i32 %binop_l16, %binop_r
  store i32 %addtmp17, i32* %i
  br label %loop10
}
