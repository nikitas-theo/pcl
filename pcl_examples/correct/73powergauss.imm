; ModuleID = '73powergauss'
source_filename = "73powergauss"

%anon = type { <{}>* }
%anon.0 = type { %anon* }

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %0 = call i32 @gauss(%anon* %hidden_struct, i32 2, i32 10)
  call void @writeInteger(i32 %0)
  ret void
}

define i32 @gauss(%anon* %0, i32 %1, i32 %2) {
entry:
  %x = alloca i32
  store i32 %1, i32* %x
  %p = alloca i32
  store i32 %2, i32* %p
  %hidden_struct = alloca %anon.0
  %3 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %3
  %result = alloca i32
  %temp = alloca i32
  %binop_l = load i32, i32* %p
  %eqtmp = icmp eq i32 %binop_l, 0
  %if_cond = icmp ne i1 %eqtmp, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  store i32 1, i32* %result
  %return = load i32, i32* %result
  ret i32 %return

endif:                                            ; preds = %else
  %4 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  %5 = load %anon*, %anon** %4
  %call = load i32, i32* %x
  %binop_l1 = load i32, i32* %p
  %divtmp = sdiv i32 %binop_l1, 2
  %6 = call i32 @gauss(%anon* %5, i32 %call, i32 %divtmp)
  store i32 %6, i32* %temp
  %binop_r = load i32, i32* %temp
  %binop_l2 = load i32, i32* %temp
  %addtmp = mul i32 %binop_l2, %binop_r
  store i32 %addtmp, i32* %result
  %binop_l3 = load i32, i32* %p
  %modtmp = srem i32 %binop_l3, 2
  %eqtmp4 = icmp eq i32 %modtmp, 1
  %if_cond5 = icmp ne i1 %eqtmp4, false
  br i1 %if_cond5, label %then6, label %else8

else:                                             ; preds = %entry
  br label %endif

then6:                                            ; preds = %endif
  %binop_r9 = load i32, i32* %x
  %binop_l10 = load i32, i32* %result
  %addtmp11 = mul i32 %binop_l10, %binop_r9
  store i32 %addtmp11, i32* %result
  br label %endif7

endif7:                                           ; preds = %else8, %then6
  %fdef = load i32, i32* %result
  ret i32 %fdef

else8:                                            ; preds = %endif
  br label %endif7
}
