; ModuleID = '65swap'
source_filename = "65swap"

%anon = type { <{}>* }
%anon.0 = type { %anon* }

@str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %x = alloca i32
  %y = alloca i32
  store i32 2, i32* %x
  store i32 4, i32* %y
  call void @swap(%anon* %hidden_struct, i32* %x, i32* %y)
  %call = load i32, i32* %x
  call void @writeInteger(i32 %call)
  %call1 = load i32, i32* %y
  call void @writeInteger(i32 %call1)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str, i32 0, i32 0))
  ret void
}

define void @swap(%anon* %0, i32* %1, i32* %2) {
entry:
  %hidden_struct = alloca %anon.0
  %3 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %3
  %t = alloca i32
  %assign = load i32, i32* %1
  store i32 %assign, i32* %t
  %assign1 = load i32, i32* %2
  store i32 %assign1, i32* %1
  %assign2 = load i32, i32* %t
  store i32 %assign2, i32* %2
  ret void
}
