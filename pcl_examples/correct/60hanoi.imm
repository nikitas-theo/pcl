; ModuleID = '60hanoi'
source_filename = "60hanoi"

%anon = type { <{}>* }
%anon.0 = type { %anon* }
%anon.1 = type { %anon.0* }

@str = private unnamed_addr constant [11 x i8] c"Move from \00", align 1
@str.1 = private unnamed_addr constant [5 x i8] c" to \00", align 1
@str.2 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@str.3 = private unnamed_addr constant [36 x i8] c"Please, give the number of rings : \00", align 1
@str.4 = private unnamed_addr constant [26 x i8] c"\0AHere is the solution :\0A\0A\00", align 1
@str.5 = private unnamed_addr constant [5 x i8] c"left\00", align 1
@str.6 = private unnamed_addr constant [6 x i8] c"right\00", align 1
@str.7 = private unnamed_addr constant [7 x i8] c"middle\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %numberOfRings = alloca i32
  call void @writeString(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @str.3, i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* %numberOfRings
  call void @writeString(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @str.4, i32 0, i32 0))
  %call = load i32, i32* %numberOfRings
  call void @hanoi(%anon* %hidden_struct, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.5, i32 0, i32 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.6, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str.7, i32 0, i32 0), i32 %call)
  ret void
}

define void @hanoi(%anon* %0, i8* %1, i8* %2, i8* %3, i32 %4) {
entry:
  %rings = alloca i32
  store i32 %4, i32* %rings
  %hidden_struct = alloca %anon.0
  %5 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %5
  %binop_l = load i32, i32* %rings
  %6 = icmp sge i32 %binop_l, 1
  %if_cond = icmp ne i1 %6, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  %7 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  %8 = load %anon*, %anon** %7
  %binop_l1 = load i32, i32* %rings
  %addtmp = sub i32 %binop_l1, 1
  call void @hanoi(%anon* %8, i8* %1, i8* %3, i8* %2, i32 %addtmp)
  call void @writeString(i8* %1)
  call void @writeChar(i8 32)
  call void @writeString(i8* %2)
  call void @writeChar(i8 10)
  %9 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  %10 = load %anon*, %anon** %9
  %binop_l2 = load i32, i32* %rings
  %addtmp3 = sub i32 %binop_l2, 1
  call void @hanoi(%anon* %10, i8* %3, i8* %2, i8* %1, i32 %addtmp3)
  br label %endif

endif:                                            ; preds = %else, %then
  ret void

else:                                             ; preds = %entry
  br label %endif
}

define void @move(%anon.0* %0, i8* %1, i8* %2) {
entry:
  %hidden_struct = alloca %anon.1
  %3 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  store %anon.0* %0, %anon.0** %3
  call void @writeString(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str, i32 0, i32 0))
  call void @writeString(i8* %1)
  call void @writeString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.1, i32 0, i32 0))
  call void @writeString(i8* %2)
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str.2, i32 0, i32 0))
  ret void
}
