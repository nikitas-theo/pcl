; ModuleID = '36char'
source_filename = "36char"

%anon = type { <{}>* }
%anon.0 = type { %anon* }
%anon.1 = type { %anon.0* }
%anon.2 = type { %anon.0* }

@str = private unnamed_addr constant [13 x i8] c"Hello world!\00", align 1
@str.1 = private unnamed_addr constant [35 x i8] c"Original String    : Hello world!\0A\00", align 1
@str.2 = private unnamed_addr constant [22 x i8] c"Reverse String     : \00", align 1
@str.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.4 = private unnamed_addr constant [22 x i8] c"Back from the dead : \00", align 1
@str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %a = alloca [50 x i8]
  %b = alloca [50 x i8]
  %bitcast_special_ref = bitcast [50 x i8]* %a to i8*
  call void @swapString(%anon* %hidden_struct, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str, i32 0, i32 0), i8* %bitcast_special_ref)
  call void @writeString(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @str.1, i32 0, i32 0))
  call void @writeString(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.2, i32 0, i32 0))
  %bitcast_special_ref1 = bitcast [50 x i8]* %a to i8*
  call void @writeString(i8* %bitcast_special_ref1)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.3, i32 0, i32 0))
  %bitcast_special_ref2 = bitcast [50 x i8]* %a to i8*
  %bitcast_special_ref3 = bitcast [50 x i8]* %b to i8*
  call void @swapString(%anon* %hidden_struct, i8* %bitcast_special_ref2, i8* %bitcast_special_ref3)
  call void @writeString(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @str.4, i32 0, i32 0))
  %bitcast_special_ref4 = bitcast [50 x i8]* %b to i8*
  call void @writeString(i8* %bitcast_special_ref4)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.5, i32 0, i32 0))
  ret void
}

define void @swapString(%anon* %0, i8* %1, i8* %2) {
entry:
  %hidden_struct = alloca %anon.0
  %3 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %3
  %i = alloca i32
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %body, %entry
  %4 = call i32 @length(%anon.0* %hidden_struct, i8* %1)
  %binop_l = load i32, i32* %i
  %5 = icmp sle i32 %binop_l, %4
  br i1 %5, label %body, label %endloop

endloop:                                          ; preds = %loop
  store i32 0, i32* %i
  br label %loop4

body:                                             ; preds = %loop
  %arrAcc = load i32, i32* %i
  %6 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr i8, i8* %2, i64 %6
  %arrAcc1 = load i32, i32* %i
  %7 = sext i32 %arrAcc1 to i64
  %arrayIdx2 = getelementptr i8, i8* %1, i64 %7
  %assign = load i8, i8* %arrayIdx2
  store i8 %assign, i8* %arrayIdx
  %binop_l3 = load i32, i32* %i
  %addtmp = add i32 %binop_l3, 1
  store i32 %addtmp, i32* %i
  br label %loop

loop4:                                            ; preds = %body6, %endloop
  %8 = call i32 @length(%anon.0* %hidden_struct, i8* %2)
  %divtmp = sdiv i32 %8, 2
  %binop_l7 = load i32, i32* %i
  %9 = icmp slt i32 %binop_l7, %divtmp
  br i1 %9, label %body6, label %endloop5

endloop5:                                         ; preds = %loop4
  ret void

body6:                                            ; preds = %loop4
  %arrAcc8 = load i32, i32* %i
  %10 = sext i32 %arrAcc8 to i64
  %arrayIdx9 = getelementptr i8, i8* %2, i64 %10
  %11 = call i32 @length(%anon.0* %hidden_struct, i8* %2)
  %binop_r = load i32, i32* %i
  %addtmp10 = sub i32 %11, %binop_r
  %addtmp11 = sub i32 %addtmp10, 1
  %12 = sext i32 %addtmp11 to i64
  %arrayIdx12 = getelementptr i8, i8* %2, i64 %12
  call void @swap(%anon.0* %hidden_struct, i8* %arrayIdx9, i8* %arrayIdx12)
  %binop_l13 = load i32, i32* %i
  %addtmp14 = add i32 %binop_l13, 1
  store i32 %addtmp14, i32* %i
  br label %loop4
}

define i32 @length(%anon.0* %0, i8* %1) {
entry:
  %hidden_struct = alloca %anon.1
  %2 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  store %anon.0* %0, %anon.0** %2
  %result = alloca i32
  %i = alloca i32
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %body, %entry
  %arrAcc = load i32, i32* %i
  %3 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr i8, i8* %1, i64 %3
  %binop_l = load i8, i8* %arrayIdx
  %neqtmp = icmp ne i8 %binop_l, 0
  br i1 %neqtmp, label %body, label %endloop

endloop:                                          ; preds = %loop
  %assign = load i32, i32* %i
  store i32 %assign, i32* %result
  %fdef = load i32, i32* %result
  ret i32 %fdef

body:                                             ; preds = %loop
  %binop_l1 = load i32, i32* %i
  %addtmp = add i32 %binop_l1, 1
  store i32 %addtmp, i32* %i
  br label %loop
}

define void @swap(%anon.0* %0, i8* %1, i8* %2) {
entry:
  %hidden_struct = alloca %anon.2
  %3 = getelementptr %anon.2, %anon.2* %hidden_struct, i32 0, i32 0
  store %anon.0* %0, %anon.0** %3
  %z = alloca i8
  %assign = load i8, i8* %1
  store i8 %assign, i8* %z
  %assign1 = load i8, i8* %2
  store i8 %assign1, i8* %1
  %assign2 = load i8, i8* %z
  store i8 %assign2, i8* %2
  ret void
}
