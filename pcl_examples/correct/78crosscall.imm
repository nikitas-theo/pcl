; ModuleID = '78crosscall'
source_filename = "78crosscall"

%anon = type { <{}>* }
%anon.2 = type { %anon* }
%anon.0 = type { %anon* }
%anon.1 = type { %anon* }

@str = private unnamed_addr constant [28 x i8] c"\0A---------\0A10987654321Stop\0A\00", align 1
@str.1 = private unnamed_addr constant [5 x i8] c"Stop\00", align 1
@str.2 = private unnamed_addr constant [5 x i8] c"Stop\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  call void @f(%anon* %hidden_struct, i32 10)
  call void @correct(%anon* %hidden_struct)
  ret void
}

define void @g(%anon* %0, i32 %1) {
entry:
  %x = alloca i32
  store i32 %1, i32* %x
  %hidden_struct = alloca %anon.2
  %2 = getelementptr %anon.2, %anon.2* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %2
  %binop_l = load i32, i32* %x
  %eqtmp = icmp eq i32 %binop_l, 0
  %if_cond = icmp ne i1 %eqtmp, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  call void @writeString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.2, i32 0, i32 0))
  br label %endif

endif:                                            ; preds = %else, %then
  %binop_l1 = load i32, i32* %x
  %eqtmp2 = icmp eq i32 %binop_l1, 0
  %if_cond3 = icmp ne i1 %eqtmp2, false
  br i1 %if_cond3, label %then4, label %else6

else:                                             ; preds = %entry
  %call = load i32, i32* %x
  call void @writeInteger(i32 %call)
  br label %endif

then4:                                            ; preds = %endif
  ret void

endif5:                                           ; preds = %else6
  %3 = getelementptr %anon.2, %anon.2* %hidden_struct, i32 0, i32 0
  %4 = load %anon*, %anon** %3
  %binop_l7 = load i32, i32* %x
  %addtmp = sub i32 %binop_l7, 1
  call void @f(%anon* %4, i32 %addtmp)
  ret void

else6:                                            ; preds = %endif
  br label %endif5
}

define void @correct(%anon* %0) {
entry:
  %hidden_struct = alloca %anon.0
  %1 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %1
  call void @writeString(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @str, i32 0, i32 0))
  ret void
}

define void @f(%anon* %0, i32 %1) {
entry:
  %x = alloca i32
  store i32 %1, i32* %x
  %hidden_struct = alloca %anon.1
  %2 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %2
  %binop_l = load i32, i32* %x
  %eqtmp = icmp eq i32 %binop_l, 0
  %if_cond = icmp ne i1 %eqtmp, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  call void @writeString(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.1, i32 0, i32 0))
  br label %endif

endif:                                            ; preds = %else, %then
  %binop_l1 = load i32, i32* %x
  %eqtmp2 = icmp eq i32 %binop_l1, 0
  %if_cond3 = icmp ne i1 %eqtmp2, false
  br i1 %if_cond3, label %then4, label %else6

else:                                             ; preds = %entry
  %call = load i32, i32* %x
  call void @writeInteger(i32 %call)
  br label %endif

then4:                                            ; preds = %endif
  ret void

endif5:                                           ; preds = %else6
  %3 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %4 = load %anon*, %anon** %3
  %binop_l7 = load i32, i32* %x
  %addtmp = sub i32 %binop_l7, 1
  call void @g(%anon* %4, i32 %addtmp)
  ret void

else6:                                            ; preds = %endif
  br label %endif5
}
