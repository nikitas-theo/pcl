; ModuleID = '61primes'
source_filename = "61primes"

%anon = type { <{}>* }

@str = private unnamed_addr constant [8 x i8] c"Limit: \00", align 1
@str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.3 = private unnamed_addr constant [25 x i8] c" prime number(s) found.\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %n = alloca i32
  %p = alloca i32
  %t = alloca i32
  %c = alloca i32
  call void @writeString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str, i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* %n
  store i32 1, i32* %c
  call void @writeInteger(i32 2)
  store i32 3, i32* %p
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.1, i32 0, i32 0))
  br label %loop

loop:                                             ; preds = %endif, %entry
  %binop_r = load i32, i32* %n
  %binop_l = load i32, i32* %p
  %1 = icmp slt i32 %binop_l, %binop_r
  br i1 %1, label %body, label %endloop

endloop:                                          ; preds = %loop
  %call13 = load i32, i32* %c
  call void @writeInteger(i32 %call13)
  call void @writeString(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @str.3, i32 0, i32 0))
  ret void

body:                                             ; preds = %loop
  store i32 3, i32* %t
  br label %loop1

loop1:                                            ; preds = %body3, %body
  %binop_r4 = load i32, i32* %t
  %binop_l5 = load i32, i32* %p
  %modtmp = srem i32 %binop_l5, %binop_r4
  %neqtmp = icmp ne i32 %modtmp, 0
  br i1 %neqtmp, label %body3, label %endloop2

endloop2:                                         ; preds = %loop1
  %binop_r7 = load i32, i32* %t
  %binop_l8 = load i32, i32* %p
  %eqtmp = icmp eq i32 %binop_l8, %binop_r7
  %if_cond = icmp ne i1 %eqtmp, false
  br i1 %if_cond, label %then, label %else

body3:                                            ; preds = %loop1
  %binop_l6 = load i32, i32* %t
  %addtmp = add i32 %binop_l6, 2
  store i32 %addtmp, i32* %t
  br label %loop1

then:                                             ; preds = %endloop2
  %call = load i32, i32* %p
  call void @writeInteger(i32 %call)
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.2, i32 0, i32 0))
  %binop_l9 = load i32, i32* %c
  %addtmp10 = add i32 %binop_l9, 1
  store i32 %addtmp10, i32* %c
  br label %endif

endif:                                            ; preds = %else, %then
  %binop_l11 = load i32, i32* %p
  %addtmp12 = add i32 %binop_l11, 2
  store i32 %addtmp12, i32* %p
  br label %loop

else:                                             ; preds = %endloop2
  br label %endif
}
