; ModuleID = '77nil'
source_filename = "77nil"

%anon = type { <{}>* }

@str = private unnamed_addr constant [6 x i8] c"Hello\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %x = alloca i32*
  store i32* null, i32** %x
  %binop_l = load i32*, i32** %x
  %neqtmp = icmp ne i32* %binop_l, null
  %if_cond = icmp ne i1 %neqtmp, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  call void @writeString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0))
  br label %endif

endif:                                            ; preds = %else, %then
  ret void

else:                                             ; preds = %entry
  br label %endif
}
