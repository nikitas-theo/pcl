; ModuleID = '35char'
source_filename = "35char"

%anon = type { <{}>* }
%anon.0 = type { %anon* }
%anon.1 = type { %anon* }

@str = private unnamed_addr constant [6 x i8] c"\0A---\0A\00", align 1
@str.1 = private unnamed_addr constant [17 x i8] c"$\0Aa\\\0Aa4123oaoch\0A\00", align 1
@str.2 = private unnamed_addr constant [9 x i8] c"12345678\00", align 1
@str.3 = private unnamed_addr constant [5 x i8] c"coco\00", align 1
@str.4 = private unnamed_addr constant [5 x i8] c"lala\00", align 1
@str.5 = private unnamed_addr constant [5 x i8] c"coco\00", align 1
@str.6 = private unnamed_addr constant [5 x i8] c"coco\00", align 1
@str.7 = private unnamed_addr constant [5 x i8] c"haha\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %i = alloca i32
  %s = alloca i8*
  %c = alloca i8
  %d = alloca i8
  %e = alloca i8
  store i8 36, i8* %c
  store i8 10, i8* %d
  %call = load i8, i8* %c
  call void @writeChar(i8 %call)
  %call1 = load i8, i8* %d
  call void @writeChar(i8 %call1)
  call void @writeChar(i8 97)
  call void @writeChar(i8 92)
  call void @writeChar(i8 10)
  %0 = call i8 @lala(%anon* %hidden_struct, i8 97, i8* %d)
  call void @writeChar(i8 %0)
  store i8* getelementptr inbounds ([9 x i8], [9 x i8]* @str.2, i32 0, i32 0), i8** %s
  store i32 3, i32* %i
  %1 = load i8*, i8** %s
  %arrAcc = load i32, i32* %i
  %2 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr i8, i8* %1, i64 %2
  %assign = load i8, i8* %arrayIdx
  store i8 %assign, i8* %c
  %3 = load i8*, i8** %s
  %arrayIdx2 = getelementptr i8, i8* %3, i64 0
  %assign3 = load i8, i8* %arrayIdx2
  store i8 %assign3, i8* %d
  %4 = load i8*, i8** %s
  %arrayIdx4 = getelementptr i8, i8* %4, i64 8
  %assign5 = load i8, i8* %arrayIdx4
  store i8 %assign5, i8* %e
  %call6 = load i8, i8* %c
  call void @writeChar(i8 %call6)
  %call7 = load i8, i8* %d
  call void @writeChar(i8 %call7)
  %call8 = load i8, i8* %e
  call void @writeChar(i8 %call8)
  store i32 1, i32* %i
  %5 = load i8*, i8** %s
  %arrAcc9 = load i32, i32* %i
  %6 = sext i32 %arrAcc9 to i64
  %arrayIdx10 = getelementptr i8, i8* %5, i64 %6
  %call11 = load i8, i8* %arrayIdx10
  call void @writeChar(i8 %call11)
  %7 = load i8*, i8** %s
  %arrayIdx12 = getelementptr i8, i8* %7, i64 2
  %call13 = load i8, i8* %arrayIdx12
  call void @writeChar(i8 %call13)
  store i32 3, i32* %i
  %arrAcc14 = load i32, i32* %i
  %8 = sext i32 %arrAcc14 to i64
  %arrayIdx15 = getelementptr [5 x i8], [5 x i8]* @str.3, i64 0, i64 %8
  %assign16 = load i8, i8* %arrayIdx15
  store i8 %assign16, i8* %c
  %call17 = load i8, i8* %c
  call void @writeChar(i8 %call17)
  %arrAcc18 = load i32, i32* %i
  %9 = sext i32 %arrAcc18 to i64
  %arrayIdx19 = getelementptr [5 x i8], [5 x i8]* @str.4, i64 0, i64 %9
  %call20 = load i8, i8* %arrayIdx19
  call void @writeChar(i8 %call20)
  %assign21 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.5, i64 0, i64 1)
  store i8 %assign21, i8* %c
  %call22 = load i8, i8* %c
  call void @writeChar(i8 %call22)
  %call23 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.6, i64 0, i64 2)
  call void @writeChar(i8 %call23)
  %call24 = load i8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @str.7, i64 0, i64 2)
  %10 = load i8*, i8** %s
  %arrayIdx25 = getelementptr i8, i8* %10, i64 1
  %11 = call i8 @lala(%anon* %hidden_struct, i8 %call24, i8* %arrayIdx25)
  call void @writeChar(i8 %11)
  call void @correct(%anon* %hidden_struct)
  ret void
}

define void @correct(%anon* %0) {
entry:
  %hidden_struct = alloca %anon.0
  %1 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %1
  call void @writeString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0))
  call void @writeString(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @str.1, i32 0, i32 0))
  ret void
}

define i8 @lala(%anon* %0, i8 %1, i8* %2) {
entry:
  %c = alloca i8
  store i8 %1, i8* %c
  %hidden_struct = alloca %anon.1
  %3 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %3
  %result = alloca i8
  %call = load i8, i8* %c
  %4 = call i32 @ord(i8 %call)
  %call1 = load i8, i8* %2
  %5 = call i32 @ord(i8 %call1)
  %6 = icmp sgt i32 %4, %5
  %if_cond = icmp ne i1 %6, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  %assign = load i8, i8* %c
  store i8 %assign, i8* %result
  br label %endif

endif:                                            ; preds = %else, %then
  %fdef = load i8, i8* %result
  ret i8 %fdef

else:                                             ; preds = %entry
  %assign2 = load i8, i8* %2
  store i8 %assign2, i8* %result
  br label %endif
}
