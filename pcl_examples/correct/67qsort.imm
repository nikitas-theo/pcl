; ModuleID = '67qsort'
source_filename = "67qsort"

%anon = type { <{}>* }
%anon.0 = type { %anon*, i32* }
%anon.1 = type { %anon.0* }
%anon.2 = type { %anon.1* }
%anon.3 = type { %anon* }

@str = private unnamed_addr constant [3 x i8] c", \00", align 1
@str.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@str.2 = private unnamed_addr constant [8 x i8] c"Seed :\09\00", align 1
@str.3 = private unnamed_addr constant [16 x i8] c"Initial array; \00", align 1
@str.4 = private unnamed_addr constant [15 x i8] c"Sorted array: \00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %x = alloca [16 x i32]
  %seed = alloca i32
  %i = alloca i32
  call void @writeString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.2, i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* %seed
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %body, %entry
  %binop_l = load i32, i32* %i
  %1 = icmp slt i32 %binop_l, 16
  br i1 %1, label %body, label %endloop

endloop:                                          ; preds = %loop
  %bitcast_special_ref = bitcast [16 x i32]* %x to i32*
  call void @writeArray(%anon* %hidden_struct, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @str.3, i32 0, i32 0), i32 16, i32* %bitcast_special_ref)
  %bitcast_special_ref6 = bitcast [16 x i32]* %x to i32*
  call void @qsort(%anon* %hidden_struct, i32 16, i32* %bitcast_special_ref6)
  %bitcast_special_ref7 = bitcast [16 x i32]* %x to i32*
  call void @writeArray(%anon* %hidden_struct, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @str.4, i32 0, i32 0), i32 16, i32* %bitcast_special_ref7)
  ret void

body:                                             ; preds = %loop
  %binop_l1 = load i32, i32* %seed
  %addtmp = mul i32 %binop_l1, 137
  %addtmp2 = add i32 %addtmp, 220
  %binop_r = load i32, i32* %i
  %addtmp3 = add i32 %addtmp2, %binop_r
  %modtmp = srem i32 %addtmp3, 101
  store i32 %modtmp, i32* %seed
  %arrAcc = load i32, i32* %i
  %2 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr [16 x i32], [16 x i32]* %x, i64 0, i64 %2
  %assign = load i32, i32* %seed
  store i32 %assign, i32* %arrayIdx
  %binop_l4 = load i32, i32* %i
  %addtmp5 = add i32 %binop_l4, 1
  store i32 %addtmp5, i32* %i
  br label %loop
}

define void @qsort(%anon* %0, i32 %1, i32* %2) {
entry:
  %n = alloca i32
  store i32 %1, i32* %n
  %hidden_struct = alloca %anon.0
  %3 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %3
  %4 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 1
  store i32* %2, i32** %4
  %binop_l = load i32, i32* %n
  %addtmp = sub i32 %binop_l, 1
  call void @qsort_auxil(%anon.0* %hidden_struct, i32 0, i32 %addtmp)
  ret void
}

define void @qsort_auxil(%anon.0* %0, i32 %1, i32 %2) {
entry:
  %lower = alloca i32
  store i32 %1, i32* %lower
  %upper = alloca i32
  store i32 %2, i32* %upper
  %hidden_struct = alloca %anon.1
  %3 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  store %anon.0* %0, %anon.0** %3
  %x = alloca i32
  %i = alloca i32
  %j = alloca i32
  %binop_r = load i32, i32* %upper
  %binop_l = load i32, i32* %lower
  %4 = icmp slt i32 %binop_l, %binop_r
  %if_cond = icmp ne i1 %4, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  %binop_r1 = load i32, i32* %upper
  %binop_l2 = load i32, i32* %lower
  %addtmp = add i32 %binop_l2, %binop_r1
  %divtmp = sdiv i32 %addtmp, 2
  %5 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %6 = load %anon.0*, %anon.0** %5
  %7 = getelementptr %anon.0, %anon.0* %6, i32 0, i32 1
  %8 = load i32*, i32** %7
  %9 = sext i32 %divtmp to i64
  %arrayIdx = getelementptr i32, i32* %8, i64 %9
  %assign = load i32, i32* %arrayIdx
  store i32 %assign, i32* %x
  %assign3 = load i32, i32* %lower
  store i32 %assign3, i32* %i
  %assign4 = load i32, i32* %upper
  store i32 %assign4, i32* %j
  br label %loop

endif:                                            ; preds = %else, %endloop
  ret void

else:                                             ; preds = %entry
  br label %endif

loop:                                             ; preds = %endif28, %then
  %binop_r5 = load i32, i32* %j
  %binop_l6 = load i32, i32* %i
  %10 = icmp sle i32 %binop_l6, %binop_r5
  br i1 %10, label %body, label %endloop

endloop:                                          ; preds = %loop
  %11 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %12 = load %anon.0*, %anon.0** %11
  %call = load i32, i32* %lower
  %call38 = load i32, i32* %j
  call void @qsort_auxil(%anon.0* %12, i32 %call, i32 %call38)
  %13 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %14 = load %anon.0*, %anon.0** %13
  %call39 = load i32, i32* %i
  %call40 = load i32, i32* %upper
  call void @qsort_auxil(%anon.0* %14, i32 %call39, i32 %call40)
  br label %endif

body:                                             ; preds = %loop
  br label %loop7

loop7:                                            ; preds = %body9, %body
  %15 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %16 = load %anon.0*, %anon.0** %15
  %17 = getelementptr %anon.0, %anon.0* %16, i32 0, i32 1
  %18 = load i32*, i32** %17
  %arrAcc = load i32, i32* %i
  %19 = sext i32 %arrAcc to i64
  %arrayIdx10 = getelementptr i32, i32* %18, i64 %19
  %binop_r11 = load i32, i32* %x
  %binop_l12 = load i32, i32* %arrayIdx10
  %20 = icmp slt i32 %binop_l12, %binop_r11
  br i1 %20, label %body9, label %endloop8

endloop8:                                         ; preds = %loop7
  br label %loop15

body9:                                            ; preds = %loop7
  %binop_l13 = load i32, i32* %i
  %addtmp14 = add i32 %binop_l13, 1
  store i32 %addtmp14, i32* %i
  br label %loop7

loop15:                                           ; preds = %body17, %endloop8
  %21 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %22 = load %anon.0*, %anon.0** %21
  %23 = getelementptr %anon.0, %anon.0* %22, i32 0, i32 1
  %24 = load i32*, i32** %23
  %arrAcc18 = load i32, i32* %j
  %25 = sext i32 %arrAcc18 to i64
  %arrayIdx19 = getelementptr i32, i32* %24, i64 %25
  %binop_r20 = load i32, i32* %x
  %binop_l21 = load i32, i32* %arrayIdx19
  %26 = icmp sgt i32 %binop_l21, %binop_r20
  br i1 %26, label %body17, label %endloop16

endloop16:                                        ; preds = %loop15
  %binop_r24 = load i32, i32* %j
  %binop_l25 = load i32, i32* %i
  %27 = icmp sle i32 %binop_l25, %binop_r24
  %if_cond26 = icmp ne i1 %27, false
  br i1 %if_cond26, label %then27, label %else29

body17:                                           ; preds = %loop15
  %binop_l22 = load i32, i32* %j
  %addtmp23 = sub i32 %binop_l22, 1
  store i32 %addtmp23, i32* %j
  br label %loop15

then27:                                           ; preds = %endloop16
  %28 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %29 = load %anon.0*, %anon.0** %28
  %30 = getelementptr %anon.0, %anon.0* %29, i32 0, i32 1
  %31 = load i32*, i32** %30
  %arrAcc30 = load i32, i32* %i
  %32 = sext i32 %arrAcc30 to i64
  %arrayIdx31 = getelementptr i32, i32* %31, i64 %32
  %33 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %34 = load %anon.0*, %anon.0** %33
  %35 = getelementptr %anon.0, %anon.0* %34, i32 0, i32 1
  %36 = load i32*, i32** %35
  %arrAcc32 = load i32, i32* %j
  %37 = sext i32 %arrAcc32 to i64
  %arrayIdx33 = getelementptr i32, i32* %36, i64 %37
  call void @swap(%anon.1* %hidden_struct, i32* %arrayIdx31, i32* %arrayIdx33)
  %binop_l34 = load i32, i32* %i
  %addtmp35 = add i32 %binop_l34, 1
  store i32 %addtmp35, i32* %i
  %binop_l36 = load i32, i32* %j
  %addtmp37 = sub i32 %binop_l36, 1
  store i32 %addtmp37, i32* %j
  br label %endif28

endif28:                                          ; preds = %else29, %then27
  br label %loop

else29:                                           ; preds = %endloop16
  br label %endif28
}

define void @swap(%anon.1* %0, i32* %1, i32* %2) {
entry:
  %hidden_struct = alloca %anon.2
  %3 = getelementptr %anon.2, %anon.2* %hidden_struct, i32 0, i32 0
  store %anon.1* %0, %anon.1** %3
  %t = alloca i32
  %assign = load i32, i32* %1
  store i32 %assign, i32* %t
  %assign1 = load i32, i32* %2
  store i32 %assign1, i32* %1
  %assign2 = load i32, i32* %t
  store i32 %assign2, i32* %2
  ret void
}

define void @writeArray(%anon* %0, i8* %1, i32 %2, i32* %3) {
entry:
  %n = alloca i32
  store i32 %2, i32* %n
  %hidden_struct = alloca %anon.3
  %4 = getelementptr %anon.3, %anon.3* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %4
  %i = alloca i32
  call void @writeString(i8* %1)
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %endif, %entry
  %binop_r = load i32, i32* %n
  %binop_l = load i32, i32* %i
  %5 = icmp slt i32 %binop_l, %binop_r
  br i1 %5, label %body, label %endloop

endloop:                                          ; preds = %loop
  call void @writeString(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.1, i32 0, i32 0))
  ret void

body:                                             ; preds = %loop
  %binop_l1 = load i32, i32* %i
  %6 = icmp sgt i32 %binop_l1, 0
  %if_cond = icmp ne i1 %6, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %body
  call void @writeString(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @str, i32 0, i32 0))
  br label %endif

endif:                                            ; preds = %else, %then
  %arrAcc = load i32, i32* %i
  %7 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr i32, i32* %3, i64 %7
  %call = load i32, i32* %arrayIdx
  call void @writeInteger(i32 %call)
  %binop_l2 = load i32, i32* %i
  %addtmp = add i32 %binop_l2, 1
  store i32 %addtmp, i32* %i
  br label %loop

else:                                             ; preds = %body
  br label %endif
}
