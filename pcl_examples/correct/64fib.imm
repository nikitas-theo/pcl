; ModuleID = '64fib'
source_filename = "64fib"

%anon = type { <{}>* }

@str = private unnamed_addr constant [52 x i8] c"How many Fibonacci numbers do you want to compute? \00", align 1
@str.1 = private unnamed_addr constant [32 x i8] c"The number should be positive.\0A\00", align 1
@str.2 = private unnamed_addr constant [45 x i8] c"\0A\0A\09I \09 Fibonacci(I) \0A\09=====================\0A\00", align 1
@str.3 = private unnamed_addr constant [6 x i8] c" \09   \00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %twoaway = alloca i32
  %next = alloca i32
  %current = alloca i32
  %i = alloca i32
  %n = alloca i32
  call void @writeString(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @str, i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* %n
  %binop_l = load i32, i32* %n
  %1 = icmp sle i32 %binop_l, 0
  %if_cond = icmp ne i1 %1, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  call void @writeString(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @str.1, i32 0, i32 0))
  br label %endif

endif:                                            ; preds = %endloop, %then
  ret void

else:                                             ; preds = %entry
  call void @writeString(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @str.2, i32 0, i32 0))
  store i32 1, i32* %next
  store i32 1, i32* %current
  store i32 1, i32* %i
  br label %loop

loop:                                             ; preds = %body, %else
  %binop_r = load i32, i32* %n
  %binop_l1 = load i32, i32* %i
  %2 = icmp sle i32 %binop_l1, %binop_r
  br i1 %2, label %body, label %endloop

endloop:                                          ; preds = %loop
  br label %endif

body:                                             ; preds = %loop
  call void @writeChar(i8 9)
  %call = load i32, i32* %i
  call void @writeInteger(i32 %call)
  call void @writeString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str.3, i32 0, i32 0))
  %call2 = load i32, i32* %current
  call void @writeInteger(i32 %call2)
  call void @writeChar(i8 10)
  %binop_r3 = load i32, i32* %next
  %binop_l4 = load i32, i32* %current
  %addtmp = add i32 %binop_l4, %binop_r3
  store i32 %addtmp, i32* %twoaway
  %assign = load i32, i32* %next
  store i32 %assign, i32* %current
  %assign5 = load i32, i32* %twoaway
  store i32 %assign5, i32* %next
  %binop_l6 = load i32, i32* %i
  %addtmp7 = add i32 %binop_l6, 1
  store i32 %addtmp7, i32* %i
  br label %loop
}
