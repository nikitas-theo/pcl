; ModuleID = '44comp'
source_filename = "44comp"

%anon = type { <{}>* }
%anon.0 = type { %anon* }

@str = private unnamed_addr constant [6 x i8] c"\0A---\0A\00", align 1
@str.1 = private unnamed_addr constant [8 x i8] c"236710\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  br i1 false, label %then, label %else

then:                                             ; preds = %entry
  call void @writeInteger(i32 1)
  br label %endif

endif:                                            ; preds = %else, %then
  br i1 true, label %then1, label %else3

else:                                             ; preds = %entry
  call void @writeInteger(i32 2)
  br label %endif

then1:                                            ; preds = %endif
  call void @writeInteger(i32 3)
  br label %endif2

endif2:                                           ; preds = %else3, %then1
  br i1 false, label %then4, label %else6

else3:                                            ; preds = %endif
  call void @writeInteger(i32 4)
  br label %endif2

then4:                                            ; preds = %endif2
  call void @writeInteger(i32 5)
  br label %endif5

endif5:                                           ; preds = %else6, %then4
  br i1 false, label %short_and, label %full_and

else6:                                            ; preds = %endif2
  call void @writeInteger(i32 6)
  br label %endif5

short_and:                                        ; preds = %endif5
  br label %end_and

full_and:                                         ; preds = %endif5
  br label %end_and

end_and:                                          ; preds = %full_and, %short_and
  %phi_and = phi i1 [ false, %short_and ], [ false, %full_and ]
  %nottmp = xor i1 %phi_and, true
  %if_cond = icmp ne i1 %nottmp, false
  br i1 %if_cond, label %then7, label %else9

then7:                                            ; preds = %end_and
  call void @writeInteger(i32 7)
  br label %endif8

endif8:                                           ; preds = %else9, %then7
  br i1 true, label %short_and10, label %full_and11

else9:                                            ; preds = %end_and
  call void @writeInteger(i32 8)
  br label %endif8

short_and10:                                      ; preds = %endif8
  br label %end_and12

full_and11:                                       ; preds = %endif8
  br label %end_and12

end_and12:                                        ; preds = %full_and11, %short_and10
  %phi_and13 = phi i1 [ false, %short_and10 ], [ false, %full_and11 ]
  %0 = icmp eq i1 %phi_and13, false
  br i1 %0, label %short_and14, label %full_and15

short_and14:                                      ; preds = %end_and12
  br label %end_and16

full_and15:                                       ; preds = %end_and12
  %andtmp = and i1 %phi_and13, false
  br label %end_and16

end_and16:                                        ; preds = %full_and15, %short_and14
  %phi_and17 = phi i1 [ false, %short_and14 ], [ %andtmp, %full_and15 ]
  %if_cond18 = icmp ne i1 %phi_and17, false
  br i1 %if_cond18, label %then19, label %else21

then19:                                           ; preds = %end_and16
  call void @writeInteger(i32 9)
  br label %endif20

endif20:                                          ; preds = %else21, %then19
  call void @correct(%anon* %hidden_struct)
  ret void

else21:                                           ; preds = %end_and16
  call void @writeInteger(i32 10)
  br label %endif20
}

define void @correct(%anon* %0) {
entry:
  %hidden_struct = alloca %anon.0
  %1 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %1
  call void @writeString(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @str, i32 0, i32 0))
  call void @writeString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.1, i32 0, i32 0))
  ret void
}
