; ModuleID = '62divis'
source_filename = "62divis"

%anon = type { <{}>* }

@str = private unnamed_addr constant [33 x i8] c"Number to find the divisors of: \00", align 1
@str.1 = private unnamed_addr constant [29 x i8] c"The non-trivial divisors of \00", align 1
@str.2 = private unnamed_addr constant [8 x i8] c" are: \0A\00", align 1
@str.3 = private unnamed_addr constant [11 x i8] c" is prime\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %flag = alloca i1
  %n = alloca i32
  %lcv = alloca i32
  call void @writeString(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str, i32 0, i32 0))
  %0 = call i32 @readInteger()
  store i32 %0, i32* %n
  store i32 2, i32* %lcv
  store i1 true, i1* %flag
  br label %loop

loop:                                             ; preds = %endif, %entry
  %binop_l = load i32, i32* %n
  %divtmp = sdiv i32 %binop_l, 2
  %binop_l1 = load i32, i32* %lcv
  %1 = icmp sle i32 %binop_l1, %divtmp
  br i1 %1, label %body, label %endloop

endloop:                                          ; preds = %loop
  %2 = load i1, i1* %flag
  %if_cond9 = icmp ne i1 %2, false
  br i1 %if_cond9, label %then10, label %else12

body:                                             ; preds = %loop
  %binop_r = load i32, i32* %lcv
  %binop_l2 = load i32, i32* %n
  %modtmp = srem i32 %binop_l2, %binop_r
  %eqtmp = icmp eq i32 %modtmp, 0
  %if_cond = icmp ne i1 %eqtmp, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %body
  %3 = load i1, i1* %flag
  %if_cond3 = icmp ne i1 %3, false
  br i1 %if_cond3, label %then4, label %else6

endif:                                            ; preds = %else, %endif5
  %binop_l8 = load i32, i32* %lcv
  %addtmp = add i32 %binop_l8, 1
  store i32 %addtmp, i32* %lcv
  br label %loop

else:                                             ; preds = %body
  br label %endif

then4:                                            ; preds = %then
  call void @writeString(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @str.1, i32 0, i32 0))
  %call = load i32, i32* %n
  call void @writeInteger(i32 %call)
  call void @writeString(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @str.2, i32 0, i32 0))
  br label %endif5

endif5:                                           ; preds = %else6, %then4
  store i1 false, i1* %flag
  %call7 = load i32, i32* %lcv
  call void @writeInteger(i32 %call7)
  call void @writeChar(i8 10)
  br label %endif

else6:                                            ; preds = %then
  br label %endif5

then10:                                           ; preds = %endloop
  %call13 = load i32, i32* %n
  call void @writeInteger(i32 %call13)
  call void @writeString(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @str.3, i32 0, i32 0))
  br label %endif11

endif11:                                          ; preds = %else12, %then10
  ret void

else12:                                           ; preds = %endloop
  br label %endif11
}
