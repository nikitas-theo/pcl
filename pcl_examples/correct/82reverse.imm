; ModuleID = '82reverse'
source_filename = "82reverse"

%anon = type { <{}>* }
%anon.0 = type { %anon* }
%anon.1 = type { %anon* }

@str = private unnamed_addr constant [6 x i8] c"Hello\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  %r = alloca [6 x i8]
  %assign = load [6 x i8], [6 x i8]* @str
  store [6 x i8] %assign, [6 x i8]* %r
  %bitcast_special_ref = bitcast [6 x i8]* %r to i8*
  call void @reverse(%anon* %hidden_struct, i8* %bitcast_special_ref)
  %bitcast_special_ref1 = bitcast [6 x i8]* %r to i8*
  call void @writeString(i8* %bitcast_special_ref1)
  ret void
}

define i32 @strlen(%anon* %0, i8* %1) {
entry:
  %hidden_struct = alloca %anon.0
  %2 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %2
  %result = alloca i32
  store i32 0, i32* %result
  br label %loop

loop:                                             ; preds = %body, %entry
  %arrAcc = load i32, i32* %result
  %3 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr i8, i8* %1, i64 %3
  %binop_l = load i8, i8* %arrayIdx
  %neqtmp = icmp ne i8 %binop_l, 0
  br i1 %neqtmp, label %body, label %endloop

endloop:                                          ; preds = %loop
  %fdef = load i32, i32* %result
  ret i32 %fdef

body:                                             ; preds = %loop
  %binop_l1 = load i32, i32* %result
  %addtmp = add i32 %binop_l1, 1
  store i32 %addtmp, i32* %result
  br label %loop
}

define void @reverse(%anon* %0, i8* %1) {
entry:
  %hidden_struct = alloca %anon.1
  %2 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %2
  %i = alloca i32
  %l = alloca i32
  %tmp = alloca i8
  %3 = getelementptr %anon.1, %anon.1* %hidden_struct, i32 0, i32 0
  %4 = load %anon*, %anon** %3
  %5 = call i32 @strlen(%anon* %4, i8* %1)
  store i32 %5, i32* %l
  store i32 0, i32* %i
  br label %loop

loop:                                             ; preds = %body, %entry
  %binop_l = load i32, i32* %l
  %divtmp = sdiv i32 %binop_l, 2
  %binop_l1 = load i32, i32* %i
  %6 = icmp slt i32 %binop_l1, %divtmp
  br i1 %6, label %body, label %endloop

endloop:                                          ; preds = %loop
  ret void

body:                                             ; preds = %loop
  %arrAcc = load i32, i32* %i
  %7 = sext i32 %arrAcc to i64
  %arrayIdx = getelementptr i8, i8* %1, i64 %7
  %assign = load i8, i8* %arrayIdx
  store i8 %assign, i8* %tmp
  %arrAcc2 = load i32, i32* %i
  %8 = sext i32 %arrAcc2 to i64
  %arrayIdx3 = getelementptr i8, i8* %1, i64 %8
  %binop_r = load i32, i32* %i
  %binop_l4 = load i32, i32* %l
  %addtmp = sub i32 %binop_l4, %binop_r
  %addtmp5 = sub i32 %addtmp, 1
  %9 = sext i32 %addtmp5 to i64
  %arrayIdx6 = getelementptr i8, i8* %1, i64 %9
  %assign7 = load i8, i8* %arrayIdx6
  store i8 %assign7, i8* %arrayIdx3
  %binop_r8 = load i32, i32* %i
  %binop_l9 = load i32, i32* %l
  %addtmp10 = sub i32 %binop_l9, %binop_r8
  %addtmp11 = sub i32 %addtmp10, 1
  %10 = sext i32 %addtmp11 to i64
  %arrayIdx12 = getelementptr i8, i8* %1, i64 %10
  %assign13 = load i8, i8* %tmp
  store i8 %assign13, i8* %arrayIdx12
  %binop_l14 = load i32, i32* %i
  %addtmp15 = add i32 %binop_l14, 1
  store i32 %addtmp15, i32* %i
  br label %loop
}
