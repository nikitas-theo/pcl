; ModuleID = '41else'
source_filename = "41else"

%anon = type { <{}>* }
%anon.0 = type { %anon* }

@str = private unnamed_addr constant [2 x i8] c"4\00", align 1
@str.1 = private unnamed_addr constant [13 x i8] c"\0A\0Awrong!!!\0A\0A\00", align 1
@str.2 = private unnamed_addr constant [13 x i8] c"\0A\0Awrong!!!\0A\0A\00", align 1
@str.3 = private unnamed_addr constant [13 x i8] c"\0A\0Awrong!!!\0A\0A\00", align 1
@str.4 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@str.5 = private unnamed_addr constant [13 x i8] c"\0A\0Awrong!!!\0A\0A\00", align 1
@str.6 = private unnamed_addr constant [13 x i8] c"\0A\0Awrong!!!\0A\0A\00", align 1
@str.7 = private unnamed_addr constant [13 x i8] c"\0A\0Awrong!!!\0A\0A\00", align 1
@str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

declare i8* @GC_malloc(i64)

declare void @GC_init()

declare void @GC_free(i8*)

declare void @writeInteger(i32)

declare void @writeBoolean(i1)

declare void @writeChar(i8)

declare void @writeReal(double)

declare void @writeString(i8*)

declare i32 @readInteger()

declare i1 @readBoolean()

declare i8 @readChar()

declare double @readReal()

declare void @readString(i32, i8*)

declare i32 @abs(i32)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare double @pi()

declare i32 @ord(i8)

declare i8 @chr(i32)

declare i32 @truncFunc(double)

declare i32 @roundFunc(double)

define void @main() {
entry:
  call void @GC_init()
  %hidden_struct = alloca %anon
  call void @test(%anon* %hidden_struct, i32 1, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.1, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.2, i32 0, i32 0))
  call void @test(%anon* %hidden_struct, i32 2, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.3, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.4, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.5, i32 0, i32 0))
  call void @test(%anon* %hidden_struct, i32 3, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.6, i32 0, i32 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @str.7, i32 0, i32 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str.8, i32 0, i32 0))
  ret void
}

define void @test(%anon* %0, i32 %1, i8* %2, i8* %3, i8* %4) {
entry:
  %x = alloca i32
  store i32 %1, i32* %x
  %hidden_struct = alloca %anon.0
  %5 = getelementptr %anon.0, %anon.0* %hidden_struct, i32 0, i32 0
  store %anon* %0, %anon** %5
  %binop_l = load i32, i32* %x
  %neqtmp = icmp ne i32 %binop_l, 1
  %if_cond = icmp ne i1 %neqtmp, false
  br i1 %if_cond, label %then, label %else

then:                                             ; preds = %entry
  %binop_l1 = load i32, i32* %x
  %neqtmp2 = icmp ne i32 %binop_l1, 2
  %if_cond3 = icmp ne i1 %neqtmp2, false
  br i1 %if_cond3, label %then4, label %else6

endif:                                            ; preds = %else, %endif5
  %binop_l7 = load i32, i32* %x
  %eqtmp = icmp eq i32 %binop_l7, 1
  %if_cond8 = icmp ne i1 %eqtmp, false
  br i1 %if_cond8, label %then9, label %else11

else:                                             ; preds = %entry
  br label %endif

then4:                                            ; preds = %then
  call void @writeString(i8* %4)
  br label %endif5

endif5:                                           ; preds = %else6, %then4
  br label %endif

else6:                                            ; preds = %then
  call void @writeString(i8* %3)
  br label %endif5

then9:                                            ; preds = %endif
  call void @writeString(i8* %2)
  br label %endif10

endif10:                                          ; preds = %else11, %then9
  ret void

else11:                                           ; preds = %endif
  br label %endif10
}
