; ModuleID = '<string>'
source_filename = "<string>"
target triple = "x86_64-unknown-linux-gnu"

@r_1 = internal global [6 x i8] zeroinitializer
@i_1 = internal global i32 0
@l_1 = internal global i32 0
@tmp_1 = internal global i8 0

define void @main() {
.2:
  %.3 = alloca [6 x i8]
  store [6 x i8] c"Hello\00", [6 x i8]* %.3
  store [6 x i8] c"Hello\00", [6 x i8]* @r_1
  %.6 = load [6 x i8], [6 x i8]* @r_1
  %.7 = bitcast [6 x i8]* @r_1 to [0 x i8]*
  call void @reverse_1([0 x i8]* %.7)
  %.9 = load [6 x i8], [6 x i8]* @r_1
  %.10 = bitcast [6 x i8]* @r_1 to [0 x i8]*
  %.11 = call i8* @writeString([0 x i8]* %.10)
  ret void
}

declare i8* @writeInteger(i32)

declare i8* @writeChar(i8)

declare i8* @writeReal(double)

declare i8* @writeBoolean(i1)

declare i8* @writeString([0 x i8]*)

declare i32 @readInteger()

declare i8 @readChar()

declare double @readReal()

declare i1 @readBoolean()

declare i8* @readString(i32, [0 x i8]*)

declare double @fabs(double)

declare double @sqrt(double)

declare double @sin(double)

declare double @cos(double)

declare double @tan(double)

declare double @arctan(double)

declare double @exp(double)

declare double @ln(double)

declare i32 @abs(i32)

declare i32 @trunc(double)

declare i32 @round(double)

declare i32 @ord(i8)

declare i8 @chr(i32)

declare double @pi()

define i32 @strlen_1([0 x i8]* %.1) {
strlen_entry:
  %.3 = alloca i32
  store i32 0, i32* %.3
  %.7 = load i32, i32* %.3
  %.8 = getelementptr [0 x i8], [0 x i8]* %.1, i32 0, i32 %.7
  %.9 = load i8, i8* %.8
  %.10 = icmp ne i8 %.9, 0
  br i1 %.10, label %.5, label %.6

.5:                                               ; preds = %.5, %strlen_entry
  %.12 = load i32, i32* %.3
  %.13 = add i32 %.12, 1
  store i32 %.13, i32* %.3
  %.15 = load i32, i32* %.3
  %.16 = getelementptr [0 x i8], [0 x i8]* %.1, i32 0, i32 %.15
  %.17 = load i8, i8* %.16
  %.18 = icmp ne i8 %.17, 0
  br i1 %.18, label %.5, label %.6

.6:                                               ; preds = %.5, %strlen_entry
  %.20 = load i32, i32* %.3
  ret i32 %.20
}

define void @reverse_1([0 x i8]* %.1) {
reverse_entry:
  %.3 = load [0 x i8], [0 x i8]* %.1
  %.4 = call i32 @strlen_1([0 x i8]* %.1)
  store i32 %.4, i32* @l_1
  store i32 0, i32* @i_1
  %.9 = load i32, i32* @i_1
  %.10 = load i32, i32* @l_1
  %.11 = sdiv i32 %.10, 2
  %.12 = icmp slt i32 %.9, %.11
  br i1 %.12, label %.7, label %.8

.7:                                               ; preds = %.7, %reverse_entry
  %.14 = load i32, i32* @i_1
  %.15 = getelementptr [0 x i8], [0 x i8]* %.1, i32 0, i32 %.14
  %.16 = load i8, i8* %.15
  store i8 %.16, i8* @tmp_1
  %.18 = load i32, i32* @l_1
  %.19 = load i32, i32* @i_1
  %.20 = sub i32 %.18, %.19
  %.21 = sub i32 %.20, 1
  %.22 = getelementptr [0 x i8], [0 x i8]* %.1, i32 0, i32 %.21
  %.23 = load i8, i8* %.22
  %.24 = load i32, i32* @i_1
  %.25 = getelementptr [0 x i8], [0 x i8]* %.1, i32 0, i32 %.24
  %.26 = load i8, i8* %.25
  store i8 %.23, i8* %.25
  %.28 = load i8, i8* @tmp_1
  %.29 = load i32, i32* @l_1
  %.30 = load i32, i32* @i_1
  %.31 = sub i32 %.29, %.30
  %.32 = sub i32 %.31, 1
  %.33 = getelementptr [0 x i8], [0 x i8]* %.1, i32 0, i32 %.32
  %.34 = load i8, i8* %.33
  store i8 %.28, i8* %.33
  %.36 = load i32, i32* @i_1
  %.37 = add i32 %.36, 1
  store i32 %.37, i32* @i_1
  %.39 = load i32, i32* @i_1
  %.40 = load i32, i32* @l_1
  %.41 = sdiv i32 %.40, 2
  %.42 = icmp slt i32 %.39, %.41
  br i1 %.42, label %.7, label %.8

.8:                                               ; preds = %.7, %reverse_entry
  ret void
}
